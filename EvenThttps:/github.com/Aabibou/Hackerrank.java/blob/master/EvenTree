/*
    Abibou Mbodji August 2019
    This is the solution of this problem.
    https://www.hackerrank.com/challenges/even-tree/problem
*/

import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

public class Solution {
    static int evenCounter=0;

    // Complete the evenForest function below.
    static int evenForest(int t_n, int t_e, List<Integer> t_from, List<Integer> t_to) {
    
        List<Integer>[] adjList=new List[t_n+1];
        for(int i=1;i<=t_n;i++){
            adjList[i]=new ArrayList<Integer>();
        }
        for(int i=0;i<t_from.size();i++){
            adjList[t_to.get(i)].add(t_from.get(i));

        }

        bfs(adjList, 1);

    

        return 0;
    }

    static int bfs(List<Integer>[] adjList, int index){
        int count=1;
        for(int a:adjList[index]){
            count+=bfs(adjList, a);
        }
        if(count%2==0)
            evenCounter++;
        return count;
    }

    private static final Scanner in = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        

        int tNodes = in.nextInt();
        int tEdges = in.nextInt();

        List<Integer> tFrom = new ArrayList<>();
        List<Integer> tTo = new ArrayList<>();

        
        for(int i=0;i<tEdges;i++){
                tFrom.add(in.nextInt());
                tTo.add(in.nextInt());
        }
        

        int res = evenForest(tNodes, tEdges, tFrom, tTo);
        System.out.print((evenCounter-1));

    }
}
